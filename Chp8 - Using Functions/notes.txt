Using Functions
--------------------

TypeScript compiler options:

target 
This option specifies the version of the JavaScript language that the compiler
will target in its output.

outDir 
This option specifies the directory in which the JavaScript files will be placed.

rootDir 
This option specifies the root directory that the compiler will use to locate
TypeScript files.

declaration 
This option produces type declaration files when enabled, which can be useful
in understanding how types have been inferred. These files are described in
more detail in Chapter 14.

strictNullChecks
This option prevents null and undefined from being accepted as values for
other types.

noImplicitReturns
This option requires all paths in a function to return a result.
noUnusedParameters This option causes the compiler to produce a warning if a function defines
parameters that are not used.
--------------------

Beginning with the following tsconfig:

{
"compilerOptions": {
"target": "es2018",
"outDir": "./dist",
"rootDir": "./src",
"declaration": true,
//"noImplicitAny": true,
//"strictNullChecks": true
}
}


--------------------
Disabling Implicit Returns

If a function doesn't reach a return keyword, it returns undefined.

noImplicitReturns is a compiler option to throw an error when this happens.

--------------------
Using Type Annotations for Function Results

The compiler infers a function result type by analyzing the code paths and creating a union
of the types it encounters.

use a type annotation to explicitly specify the result type because it allows me to
declare what I intended the function result to be, rather than what the code produces

function calculateTax4(amount: number, discount: number = 0, ...extraFees: number[]): number {

This function will return a number type.


--------------------
Defining Void Functions

Functions that do not produce results are declared using the void type

function writeValue(label: string, value: number): void {
console.log(`${label}: ${value}`);
}

--------------------
Overloading Function Types

Type unions make it possible to define a range of types for function parameters and results

function calculateTax(amount: number | null): number | null {
if (amount != null) 
{
    return amount * 1.2;
}
return null;
}

let taxAmount: number | null = calculateTax(100);
if (typeof taxAmount === "number") 
{
    writeValue("Tax value", taxAmount);
}

calculateTax will accept either a number or a null and will return either a number or a null

What is missing is the relationship between the parameter and result types.
The function will always return a number when amount is a number and null when amount is null.

The user of the function has to use a type guard in order to use it to avoid null values.

We make the adjustment:

Each overload defines a combination of types supported by the function.
This givs a mapping between the parameters and the results they produce.

When the function is invoked, the compiler is able to determine the result type based 
on the type of the arguments provided, allowing the taxAmount variable to be defined 
as a number and removing the need for the type guard to pass on the result
to the writeValue function.

function calculateTax5(amount: number): number;
function calculateTax5(amount: null): null;
function calculateTax5(amount: number | null): number | null {
if (amount != null) {
return amount * 1.2;
}
return null;
}

....

function writeValue(label: string, value: number): void {
console.log(`${label}: ${value}`);
}
let taxAmount: number = calculateTax(100);
//if (typeof taxAmount === "number") {
writeValue("Tax value", taxAmount);
//}




