Working with Objects
---------------------

tsconfig options used:

target 
This option specifies the version of the JavaScript language that the
compiler will target in its output.

outDir 
This option specifies the directory in which the JavaScript files will
be placed.

rootDir
This option specifies the root directory that the compiler will use
to locate TypeScript files.

declaration 
This option produces type declaration files when enabled, which
can be useful in understanding how types have been inferred.
These files are described in more detail in Chapter 14.

strictNullChecks
 This option prevents null and undefined from being accepted as
values for other types.

suppressExcessPropertyErrors
This option prevents the compiler from generating errors for
objects that define properties not in a specified shape.

JavaScript objects are collections of properties that can be created using the literal syntax, 
constructor functions, or classes.

objects can be altered once they have been created

The TypeScript compiler tries to make sure that objects are used consistently by looking for 
common shape characteristics.

The best way to see how this works is to look at the declaration files that the compiler
generates when its declarations option is enabled.

Given:
let hat = { name: "Hat", price: 100 };
let gloves = { name: "Gloves", price: 75 };
let products = [hat, gloves];

This compiles to:
declare let hat: {
    name: string;
    price: number;
};
declare let gloves: {
    name: string;
    price: number;
};
declare let products: {
    name: string;
    price: number;
}[];

adding:
let umbrella = { name: "Umbrella" };
let products = [hat, gloves, umbrella];
products.forEach(prod => console.log(`${prod.name}: ${prod.price}`));

>Property 'price' does not exist on type '{ name: string; }'.

the forEach method reads a price property which is not present in umbrella

products compile has changed from:
declare let products: {
    name: string;
    price: number;
}[];

to

declare let products: {
    name: string;
}[];

the compiler creates a type that has the common properties of the objects it
contains because they are the only properties that are safe to work with

Using Object Shape Type Annotations
---------------------

For object literals, the TypeScript compiler infers the type of each property using the value 
that it has been assigned.

Types can also be explicitly specified using type annotations

Object shape type annotations:
let products: { name: string, price: number }[] = [hat, gloves, umbrella];

Understanding How Shape Types Fit
---------------------

To match a type, an object must define all the properties in the shape.

let umbrella = { name: "Umbrella", price: 30, waterproof: true };

umbrella now matches the shape of the products array type becuase it has name and price

waterproof is ignored because it is not part of the shape type

Notice that type annotations are not required to indicate 
that individual objects have a specific shape.

The TypeScript compiler automatically determines whether an object conforms to a shape by 
inspecting its properties and their values.

Using Optional Properties for Irregular Shapes
---------------------
Optional properties make a shape type more flexible, allowing it to match objects that don’t have 
those properties

price?: number // waterproof?: boolean
Optional properties

let products: { name: string, price?: number, waterproof?: boolean }[]
= [hat, gloves, umbrella];

products.forEach(prod =>
console.log(`${prod.name}: ${prod.price} Waterproof: ${ prod.waterproof }`));

the value of the optional property will be either the value defined by the object or undefined

Including Methods in Shape Types
---------------------

let products: { name: string, price?: number, hasFeature?(Feature): boolean }[] 
= [hat, gloves, umbrella];

hasFeature: method name
(Feature): Parameter type
boolean: result type

Enforcing Strict Checking for Methods
---------------------

TypeScript compiler can report errors when
an optional method specified by a shape type is used without checking for undefined values.

when using

products.forEach(prod => console.log(`${prod.name}: ${prod.price} 
Waterproof?: ${prod.hasFeature(Feature.Waterproof)}`));

>src/index.ts(13,22): error TS2722: Cannot invoke an object which is possibly 'undefined'.

products.forEach(prod => console.log(`${prod.name}: ${prod.price} 
Waterproof?: ${prod.hasFeature ? prod.hasFeature(Feature.Waterproof) : "false"}`));

corrects this issue

Using Type Aliases for Shape Types
---------------------

A type alias can be used to give a name to a specific shape, making it easier to refer to the shape in code
consistently.

Adding in:

type Product = {
    name: string,
    price?: number,
    hasFeature?(Feature): boolean
    };

and modifying:
let products: Product[] = [hat, gloves, umbrella];

The alias assigns a name to the shape, which can be used in type annotations

an alias named Product is created and used as the type for the array

Using an alias doesn’t change the output from the code when it is compiled and executed.

Dealing with Excess Properties
---------------------

type annotations can often be omitted

let mirrorShades = { name: "Sunglasses", price: 54, finish: "mirrored"};
let darkShades: Product = { name: "Sunglasses", price: 54, finish: "flat"};

let products: Product[] = [hat, gloves, umbrella, mirrorShades, darkShades];

causes error
mirrorShades and darkShades are treated differently by the compiler
They do have the same shape.
darkShades has a Product type annotation.
The "finish" property isn't part of the Product shape and is known as an "excess property".
darkShades object can be used as a Product

The error can be prevented by removing the excess property or by removing the type annotation.

Adding the option "suppressExcessPropertyErrors": true
resolves the errors caused.

When the suppressExcessPropertyErrors setting is true, the compiler won’t report an error if an
object literal defines properties that are not part of the type declared by the annotation.

So at this point Product does not solely require name, price, hasFeature.

Using Shape Type Unions
---------------------

type unions are types in their own right and contain the properties that are 
defined by all of their constituent types

This isn’t a useful feature when dealing with unions of primitive data types because 
there are few common properties, but it is a more useful feature when dealing with objects

There is a union of Product and Person which id and name is in common so it can be used.
dataItems.forEach(item => console.log(`ID: ${item.id}, Name: ${item.name}`));

Understanding Union Property Types
---------------------
When a union of shape types is created, the types of each common property are combined, also using a
union.

This effect can be more easily understood by creating a type that is equivalent to the union

type UnionType = {
    id: number | string,
    name: string
};

//Replacing with a Union Type
let dataItems: UnionType[] = [hat, gloves, umbrella, bob];
// let dataItems: (Product | Person)[] = [hat, gloves, umbrella, bob];

The id property type is a number | string union because the id property in the Product type
is a number, but the id property in the Person type is a string

Using Type Guards for Objects
---------------------

the typeof keyword can be used to create type guards

the typeof keyword cannot be used with objects because it will always return the
same result

dataItems.forEach(item => console.log(`ID: ${item.id}, Type: ${typeof item}`));

>ID: 1, Type: object
>ID: 2, Type: object
>ID: 3, Type: object
>ID: bsmith, Type: object

the typeof keyword isn’t useful for determining whether an
object conforms to the Product and Person shapes

Type Guarding by Checking Properties
---------------------

The simplest way to differentiate between shape types is to use the JavaScript in keyword to check for a
property

The goal is to be able to determine each object in the array conforms to the Product 
shape or the Person shape.

We know these are the only types that the array can contain because its type 
annotation is (Product | Person)[].

A shape is a combination of properties
a type guard must test for one or more properties that are
included in one shape but not the other

any object that has a city property must
conform to the Person shape since this property is not part of the Product shape

To create a type guard
that checks for a property, the property name is expressed as a string literal, followed by the in keyword,
followed by the object to test

if ("city" in item) 
    {
        console.log(`Person: ${item.name}: ${item.city}`);
    } 
    else 
    {
        console.log(`Product: ${item.name}: ${item.price}`);
    }

The in expression returns true for objects that define the specified property and false otherwise.

if ("id" in item && "name" in item)

This test checks for id and name properties, but these are defined by both the Person and Product
types, and the test doesn’t give the compiler enough information to infer a type.

The type inferred in the if block is the Product | Person union, which means the use of the 
city property will generate an error.

The type inferred in the else block is never, since all the possible types have already been
inferred, and the compiler will generate errors for the use of the name and price properties.

if ("price" in item) 
The test will match objects that define a price property, which means that the type inferred 
in the if block will be Product

Type Guarding with a Type Predicate Function
--------------------------------------------

The in keyword is a useful way to identify whether an object conforms to a shape, 
but it requires the same checks to be written each time types need to be identified.

function isPerson(testObj: any): testObj is Person {
    return testObj.city !== undefined;
    }

dataItems.forEach(item => {
    if (isPerson(item)) 
    {........

testObj is the Test Parameter
is is the keyword
Person is the Guard Type

function isPerson(testObj : any): testObj is Person {}

The result of the function, which is a type predicate, tells the compiler which of the function’s
parameters is being tested and the type that the function checks for

If testObj.city !== undefined;
The object is a Person

"is" functions are a flexible way to check for types

Using Type Intersections
--------------------------------------------

Type intersections combine the features of multiple types, allowing all the features to be used.
The type of the dataItems array is set to the intersection of the Person and Employee types.

Intersection Type & Intersection Type
let dataItems: (Person & Employee)[] = [bob];

An object will conform to the shape of a type intersection only if it defines the properties defined by
merging all the types in that intersection.

Person:
id
name 
city

Employee:
company
dept

Person & Employee:
id
name
city
company
dept

Using Intersections for Data Correlation
--------------------------------------------

Intersections are useful when you receive objects from one source and need to introduce new 
functionality so they can be used elsewhere in the application
or when objects from two data sources need to be
correlated and combined

type Person = {
    id: string,
    name: string,
    city: string
};

type Employee = {
    id: string,
    company: string,
    dept: string
};

type EmployedPerson = Person & Employee;

correlateData function receives an array of Person objects and an array of
Employee objects and uses the id property they share to produce objects that combine the properties of
both shape types.

let people: Person[] =
            [{ id: "bsmith", name: "Bob Smith", city: "London" },
            { id: "ajones", name: "Alice Jones", city: "Paris"},
            { id: "dpeters", name: "Dora Peters", city: "New York"}];

let employees: Employee[] =
            [{ id: "bsmith", company: "Acme Co", dept: "Sales" },
            { id: "dpeters", company: "Acme Co", dept: "Development" }];

let dataItems3: EmployedPerson[] = correlateData(people, employees);

function correlateData(peopleData: Person[], staff: Employee[]): EmployedPerson[] {
    const defaults = { company: "None", dept: "None"};
    return peopleData.map(p => ({ ...p,
    ...staff.find(e => e.id === p.id) || { ...defaults, id: p.id } }));
}

Works as a way of joining the data.

Understanding Intersection Merging
-----------------------------------

an intersection combines features from multiple types

an object that conforms to the intersection
shape also conforms to each of the types in the intersection

an object that conforms to Person
& Employee can be used where the Person type or the Employee type are specified

function correlateData(peopleData: Person[], staff: Employee[]): EmployedPerson[] {
    const defaults = { company: "None", dept: "None"};
    return peopleData.map(p => ({ ...p,
    ...staff.find(e => e.id === p.id) || { ...defaults, id: p.id } }));
}

let dataItems4: EmployedPerson[] = correlateData(people, employees);

function writePerson(per: Person): void {
console.log(`Person: ${per.id}, ${per.name}, ${per.city}`);
}

function writeEmployee(emp: Employee): void {
console.log(`Employee: ${emp.id}, ${emp.company}, ${emp.dept}`);
}

dataItems4.forEach(item => {
writePerson(item);
writeEmployee(item);
});

The compiler matches an object to a shape by ensuring that it defines all the properties 
in the shape and doesn’t care about excess properties

The objects that conform to the EmployedPerson type can be used in the writePerson and
writeEmployee functions because they conform to the types specified for the function’s 
parameters

Merging Properties with the Same Type
-------------------------------------

The simplest situation is where there are properties with the same name and the same type

Person
id: string

Employee
id: string

Person & Employee
id: string

the id properties defined by the Person and Employee types, 
which are merged into the intersection without any changes

Merging Properties with Different Types
-------------------------------------

If there are properties with the same name but different types, the compiler keeps the property 
name but intersects the type.

This is an example of where removes the functions and adds a contact property to the
Person and Employee types.

type Person = {
id: string,
name: string,
city: string,
contact: number
};

type Employee = {
id: string,
company: string,
dept: string,
contact: string
};

type EmployedPerson = Person & Employee;

let typeTest = ({} as EmployedPerson).contact;
^a useful trick for seeing what type the compiler assigns to
a property in the intersection by looking at the declaration file created in the dist folder 
when the declaration compiler configuration option is true.

The statement uses a type assertion to tell the compiler
that an empty object conforms to the EmployedPeson type and assigns the contact property 
to the typeTest variable.

index.d.ts file in the dist folder will show the type for the 
contact property in the intersection

person: 
id: string
contact: number

employee:
id: string
contact: string

Person & Employee:
id: string
contact: number & string

Creating an intersection of the types is the only way the compiler can merge the properties

The intersection of number and string is an impossible type.

the only solution is to adjust the types used in the intersection so that shape
types are used instead of primitives

Using Shape Types in an Intersection

type Person = {
id: string,
name: string,
city: string,
contact: { phone: number }
};

type Employee = {
id: string,
company: string,
dept: string,
contact: { name: string }
};

type EmployedPerson = Person & Employee;
let typeTest = ({} as EmployedPerson).contact;

let person1: EmployedPerson = {
id: "bsmith", name: "Bob Smith", city: "London",
company: "Acme Co", dept: "Sales",
contact: { name: "Alice" , phone: 6512346543 }
};

let person2: EmployedPerson = {
id: "dpeters", name: "Dora Peters", city: "New York",
company: "Acme Co", dept: "Development",
contact: { name: "Alice" , phone: 6512346543 }
};

Now the intersection is handled as:

person: 
id: string
contact: {phone: number}

employee:
id: string
contact: {name: string}}

Person & Employee:
id: string
contact: {phone: number} & {name: string}

The intersection of an object with a phone property and an object with a name property is 
an object with phone and name properties, which makes it possible to assign contact values 
that conform to the Person and Employee types and their intersection.

Merging Methods
--------------

If the types in an intersection define methods with the same name, then the compiler will 
create a function whose signature is an intersection

type Person = {
id: string,
name: string,
city: string,
getContact(field: string): string
};

type Employee = {
id: string,
company: string,
dept: string
getContact(field: number): number
};

type EmployedPerson = Person & Employee;

let person: EmployedPerson = {

    id: "bsmith", 
    name: "Bob Smith", 
    city: "London",
    company: "Acme Co", 
    dept: "Sales",
    getContact(field: string | number): any 
    {
        return typeof field === "string" ? "Alice" : 6512346543;
    }

};

let typeTest = person.getContact;
let stringParamTypeTest = person.getContact("Alice");
let numberParamTypeTest = person.getContact(123);
console.log(`Contact: ${person.getContact("Alice")}`);
console.log(`Contact: ${person.getContact(12)}`);

person: 
id: string
getContact( field: string): string

employee:
id: string
getContact( field: number): number

Person & Employee:
id: string
getContact: (field: string) => string
            & (field: number) => number

It can be difficult to work out the consequences of merging methods in an intersection

the overall effect is similar to type overloading

rely on the type declaration file

When the index.ts file is saved and compiled, the index.d.ts file in the dist folder will contain
statements that show the type the compiler has assigned to each of the variables

declare let typeTest: ((field: string) => string) & ((field: number) => number);
declare let stringParamTypeTest: string;
declare let numberParamTypeTest: number;

type union to create a
method that can receive string and number values

Method results are more difficult to deal with because it
can be hard to find a type that preserves compatibility

the most reliable approach is to use any as the
method result and use type guards to create the mappings between parameters and result types

getContact(field: string | number): any {
return typeof field === "string" ? "Alice" : 6512346543;
}

there is no other type that can be specified in this
example that allows an EmployedPerson object to be used both as a Person and an Employee object







