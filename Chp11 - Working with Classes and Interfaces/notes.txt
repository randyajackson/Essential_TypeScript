Working with Classes and Interfaces
-------------------------------------

TypeScript Compiler Options Used in This Chapter

target 
This option specifies the version of the JavaScript language that the compiler will target in
its output.

outDir 
This option specifies the directory in which the JavaScript files will be placed.

rootDir 
This option specifies the root directory that the compiler will use to locate TypeScript files.

declaration 
This option produces type declaration files when enabled, which can be useful in
understanding how types have been inferred. These files are described in more detail in
Chapter 14.

-------------------------------------
Using Constructor Functions

Objects can be created using constructor functions providing access to the prototype system

Constructor functions can be handled in TypeScript but have a different syntax

-------------------------------------
Using Classes

TypeScript doesn't have good support for constructor functions.
This is because the focus has been on classes.

index2.ts

Using the Access Control Keywords
-------------------------------------

public 
This keyword allows free access to a property or method and is the default if no keyword is used.

private
This keyword restricts access to the class that defines the property or method it is applied to.

protected
This keyword restricts access to the class that defines the property or method it is applied to
and its subclasses.

strictPropertyInitialization: True
errors are reported if a class defines a property that is not assigned a value
strictNullChecks must also be True in order for this to work

Defining Read-Only Properties
-------------------------------------

readonly can be used to create instance properties whose value is assigned by the constructor
but can otherwise not be changed

Simplifying Class Constructors
-------------------------------------

Pure JavaScript classes use constructors that create instance properties dynamically
TypeScript requires properties to be explicitly defined.

class Employee2 {

    constructor(public readonly id: string, public name: string, 
                    private dept: string, public city: string){
    }

    writeDept(){
        console.log(`${this.name} works in ${this.dept}`);
    }
}

The compiler automatically created an instance property for each of the constructor arguments.
You can add access control and the readonly keyword in the constructor argument.

Using Class Inheritance
-------------------------------------

TypeScript builds on standard class inheritance features.

class Person2{
    
    constructor(public id: string, public name: string, public city: string)
    {};

}

class Employee2 extends Person2{
    
    constructor(public readonly id: string, public name: string,
                private dept: string, public city: string)
    {
        super(id, name, city);
    };
    
    writeDept(){
         console.log(`${this.name} works in ${this.dept}`);
     }
}

When using the xtends keyword, TypeScript requires that the superclass constructor is
invoked using the super keyword.

This ensures that its properties are initialized.

Understanding Type Inference for Subclasses
-------------------------------------
Caution is required when letting the compiler infer types from classes because it is easy to produce
unexpected results

salesEmployee2 contains a Person2 object and an Employee2 object

Looking at index2.d.ts, the type for data2 reads:
declare let data2: Person2[];

You assume that the compiler has realized that Employee2 is a subclass of Person2.
Also that all the objects in the array can be treated as Person2 objects.

In reality, the compiler creates a union of the types the array contains which would be
Person2 | Employee2 and determines that this is equal to Person2

The compiler pays attention to object shapes even if the developer is paying attention to classes.

Consequences appear when using objects that share a common superclass.


Using an Abstract Class
-------------------------------------

Abstract classes cannot be instantiated directly and are used to describe common functionality that must
be implemented by subclasses, forcing subclasses to adhere to a specific shape but allowing class-specific
implementations of specific methods

use the abstract keyword before the class
and add the abstract keyword before the methods defined without a body

abstract class Person2{
    ...
getDetails(): string {
        return `${this.name}, ${this.getSpecificDetails()}`;
    }

abstract getSpecificDetails(): string;
    ...
}

When a class extends an abstract class, it must implement all the abstract methods.

So in this instance, any class that extends Person2 must have a getSpecificDetails method.

data2.forEach(item => {
    console.log(item.getDetails());

this eliminates the checking for diffent classes

getDetails invokes getSpecificDetails() for the class that it belongs to because of the abstract keyword

Type Guarding an Abstract Class
-------------------------------------

Abstract classes are implemented as regular classes in the JavaScript generated
by the compiler
The TypeScript compiler prevents abstract classes from being instantiated and this is not carried
over into the JavaScript code.
The instanceof keyword can be used to narrow types.


Using Interfaces
-------------------------------------

Interfaces are used to describe the shape of an object, which a class that implements the Interface
must conform to.

Interfaces are defined by the interface keyword and contain the set of properties and methods that a
class must provide in order to conform to the interface.

Unlike abstract classes, interfaces don't implement methods or define a constructor.
Interfaces only define a shape.

Interfaces are implemented by classes through the use of the implements keyword.

class Employee3 implements Person3 {...}

Implementing Multiple Interfaces
-------------------------------------
A class can implement more than one interface

Customer3 implements Person3 and DogOwner

Person3 object assigned to the variable alice can be added to the arrays typed for Person 
and DogOwner objects

A clas can implement multiple interfaces only if there are no overlapping properties with
conflicting types.

If Person 3 had id: string and DogOwner had id: number
there would be no way to implement both properties.

Extending Interfaces
-------------------------------------
Interfaces can be extended, just like classes

This results in interfaces that contain the properties and methods inherited from its parent
interfaces, along with new features that are defined.

interface Person3{
    name: string; //defines a name property
    getDetails(): string; //defines a getDetails method
}

interface DogOwner extends Person3{
    dogName: string;
    getDogDetails(): string;
}

class Customer3 implements DogOwner{ 
    constructor(public readonly id: string, public name: string,
    public city: string, public creditLimit: number, public dogName) {}

    getDetails() {
        return `${this.name} has ${this.creditLimit} limit`;
    }

    getDogDetails(){
        return `${this.name} has a dog named ${this.dogName}`;
    }
}

Shape types and interfaces can often be used interchangeably.

Clases can use the implements keyword with a shape type to indicate they implement the
properties in the shape

type Person = {
    name: string;
    getDetails(): string;
}

class Employee implements Person {
    constructor(..., public name: string, ...){}

    getDetails(){
        ...
    }
}

Defining Optional Interface Properties and Methods
-------------------------------------

Adding an optional property to an interface allows classes that implement the interface to provide the
property without making it a requirement

interface Person3{
    name: string; //defines a name property
    getDetails(): string; //defines a getDetails method

    dogName?: string; //optional properties
    getDogDetails?(): string;
}

is the same as
interface DogOwner extends Person3{...}
...
class Customer3 implements Person3, DogOwner{...}

Optional interface features can be defined through the interface type without causing compiler
errors but you must check to ensure that you do not receive undefined values since
objects may have been created from classes that have not implemented them, like this:

if (item.getDogDetails) {
console.log(item.getDogDetails());
}

Since getDogDetails will not be defined in Employee3 and only in Customer3
so type coercion is used to only use the method on objects that have defined it.

Defining an Abstract Interface Implementation
-------------------------------------

Abstract classes can be used to implement some or all of the features described by an interface

This can reduce code duplication when some of the classes that implement an interface would
do so, in the same way, using the same code.

Type Guarding an Interface
-------------------------------------
There is no JavaScript equivalent to interfaces, and no details of interfaces are included in the JavaScript
code generated by the TypeScript compiler.

This means that the instanceof keyword cannot be used to
narrow interface types

type guarding can be done only by checking for one or more properties that are
defined by the interface

typeGuarding.ts example

if ("getDetails" in item) {
checks for the presence of the getDetails property

Dynamically Creating Properties
-------------------------------------
The TypeScript compiler only allows values to be assigned to properties that are part of an 
objectâ€™s type, which means that interfaces and classes have to define all the properties 
that the application requires

JavaScript allows new properties to be created on objects simply by assigning a value
to an unused property name.

The TypeScript index signature feature bridges these two models, allowing
properties to be defined dynamically while preserving type safety

(dynamicProperties.ts)

property name type          property value type
[propertyName: string]: Product;





























