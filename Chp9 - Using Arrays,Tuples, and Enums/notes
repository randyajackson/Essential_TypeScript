Using Arrays, Tuples, and Enums
----------------------

related data properties are grouped together to create objects

Typescript compiler options used in this chapter
----------------------
target 
This option specifies the version of the JavaScript language that the compiler will
target in its output.

outDir
 This option specifies the directory in which the JavaScript files will be placed.

rootDir
 This option specifies the root directory that the compiler will use to locate
TypeScript files.

declaration
 This option produces type declaration files when enabled, which can be useful in
understanding how types have been inferred. These files are described in more
detail in Chapter 14.

strictNullChecks
 This option prevents null and undefined from being accepted as values for other
types.

Working with Arrays
----------------------

JavaScript arrays can contain any combination of types and have variable length

TypeScript doesn’t change the flexible sizing of arrays, but it does allow the data types 
they contain to be restricted through the use of type annotations

            array type [] < square brackets
let prices: number[] = [100,75,42];

To use type intersection with arrays you would use (number | string)[]

let prices: number[]
is the same as
let prices: Array<number>

Using Inferred Typing for Arrays
----------------------

prices.forEach((price, index) => {
    writePrice(names[index], calculateTax(price));
});

//enable the declaration option in tsconfig if you are not sure
//of the typing that is being generated from inferring
//index.d.ts in the src folder

Avoiding Problems with Inferred Array Types
----------------------

The compiler infers array types using the values used to populate the array when it is created.

This can lead to type errors if the values used to populate an array are accidentally mixed

let prices = [100, 75, 42, "20"];
let names = ["Hat", "Gloves", "Umbrella", "Sunglasses"];

This causes the inferred array type to be (string | number)[]

Avoiding Problems with Empty Arrays
----------------------

let prices = [];
prices.push(...[100, 75, 42, "20"]);

index.d.ts will show:
declare let prices: any[];

Understanding the never Array Type Pitfall
----------------------

TypeScript infers types for empty arrays differently when null and undefined values are 
not assignable to other types.

The strictNullChecks setting tells the compiler to restrict the use of null and undefined values and
prevents the compiler from using any when inferring the type of an empty array.

Inferring the never type ensures that the array doesn’t escape the type checking process and 
the code won’t compile until a type is asserted for the array or the array is initialized using 
values that allow the compiler to infer a less restrictive type.

Working with Tuples
----------------------

Tuples are fixed-length arrays, where each element in the array can have a different type.

let hat: [string, number] = ["Hat", 100];
let gloves: [string, number] = ["Gloves", 75];
writePrice(hat[0], hat[1]);
writePrice(gloves[0], gloves[1]);

let <name>: [element type, element type] = ["hat", 100];

Without the type annotation the compile would infer the type [string | number].

Processing Tuples
----------------------

The restrictions on the number of elements and the element types are enforced entirely by the TypeScript
compiler, and, at runtime, a tuple is implemented as a regular JavaScript array.

hat.forEach((h: string | number) => {
    if (typeof h === "string") 
    { console.log(`String: ${h}`); } 
    else
    { console.log(`Number: ${h.toFixed(2)}`); }
    });

The function passed to the forEach method must receive string | number values.

Using Tuple Types
----------------------

Tuples have a distinct type that can be used just like any type

You can create arrays of tuples, use tuples in type unions, use type guards, etc

Typeof does not work for testing if a variabl is an array.
You need to use instanceof.

if(elem instanceof Array) [works for checking if it is an array]
...
if(typeof elem === "boolean") [ works for testing if a value is boolean]

Using Enums
----------------------

An enum allows a collection of values to be used by name, which makes code easier to read 
and ensures that a fixed set of values is used consistently.

enum Product { Hat, Gloves, Umbrella }
The enum values are accessed in the form <enum>.<value>

Enums are implemented entirely by the TypeScript compiler, relying on type checking during 
compilation and standard JavaScript features at runtime.

enum Product { Hat, Gloves, Umbrella }

[Product.Hat, Product.Gloves, Product.Umbrella].forEach(val => {
console.log(`Number value: ${val}`);
});

>Number value: 0
>Number value: 1
>Number value: 2

Because enums are implemented using JavaScript number values, an enum can be assigned a number
and is displayed as a number value

enum Product { Hat, Gloves, Umbrella }

let productValue: Product = 0;
let productName: string = Product[productValue];
console.log(`Value: ${productValue}, Name: ${productName}`);

>Value: 0, Name: Hat

Using Specific Enum Values
----------------------

By default,the TypeScript compiler starts assigning number values for an enum with zero and 
will compute the values by incrementing the previous value.

in dist/index.d.ts you will find:

declare enum Product {
    Hat = 0,
    Gloves = 1,
    Umbrella = 2
}

Enums can also be defined with literal values, where a specific value is used.

enum Product { Hat, Gloves = 20, Umbrella }

declare enum Product {
Hat = 0,
Gloves = 20,
Umbrella = 21
}

Using String Enums
----------------------

The default implementation of enums represents each value with a number, but the compiler can also use
string values for enums

enum City { London = "London", Paris = "Paris", NY = "New York"}
console.log(`City: ${City.London}`);

>City: London

Understanding the Value-Checking Limitation
----------------------

Enums can be useful, but there are some limitations because they are a feature that is implemented entirely
by the TypeScript compiler and then translated into pure JavaScript.

The compiler is excellent at checking types for enums, but it doesn’t do anything to ensure that legal number
values are used.

let productValue: Product = 0;

The compiler doesn’t prevent the assignment of a number to a variable whose type is an enum when
the number doesn’t correspond to one of the enum values

Product 0 is undefined

Understanding the Type Guard Limitation
----------------------
Testing types is done using the JavaScript typeof keyword,
and since enums are implemented using JavaScript number values, typeof 
cannot be used to distinguish between enum and number values

let productValue: Product = Product.Hat;
if (typeof productValue === "number") {
console.log("Value is a number");
}
let unionValue: number | Product = Product.Hat;
if (typeof unionValue === "number") {
console.log("Value is a number");
}

>Value is a number
>Value is a number

Using Constant Enums
----------------------
The TypeScript compiler creates an object that provides the implementation for an enum.

the compiler uses an object to implement an enum

enum Product { Hat, Gloves, Umbrella }
let productValue = Product.Hat;

Compiles to js as such:

var Product;
(function (Product) {
Product[Product["Hat"] = 0] = "Hat";
Product[Product["Gloves"] = 1] = "Gloves";
Product[Product["Umbrella"] = 2] = "Umbrella";
})(Product || (Product = {}));
let productValue = Product.Hat;

a Product object is created
and that it is used when the value is assigned to the productValue variable

To prevent the compiler from using an object to implement an enum, the const keyword can be used
when the enum is defined in the TypeScript file

Const enums are more restrictive than regular enums

const enum Product { Hat, Gloves, Umbrella }
let productValue = Product.Hat;

Compiles to js as such:

let productValue = 0 /* Hat */;

if you try in TS:
let productName = Product[0];

>src/index.ts(11,27): error TS2476: A const enum member can only be accessed using a string
literal

Using Literal Value Types
----------------------

A literal value type specifies a specific set of values and allows only those values.

The effect is to treat a set of values as a distinct type

It is a useful feature but can be difficult to understand because it blurs the
separation between types and values.

let restrictedValue: 1 | 2 | 3 = 3;
console.log(`Value: ${restrictedValue}`);

Looks similar to a type union, but literal values are used instead of data types.

1 | 2 | 3 Literal Values
2 <- Literal Value Type

restrictedValue variable can only be assigned 1,2, or 3

Anything else throws a compiler error.

let restrictedValue: 1 | 2 | 3 = 1;
let secondValue: 1 | 10 | 100 = 1;

restrictedValue = secondValue;
//is allowed

secondValue = 100;

restrictedValue = secondValue;
//src/index.ts(7,1): error TS2322: Type '100' is not assignable to type '1 | 2 | 3'

console.log(`Value: ${restrictedValue}`);

Using Literal Value Types in Functions
----------------------

Literal value types are most helpful when used with functions, allowing parameters or results to 
be restricted to a specific set of values

function calculatePrice(quantity: 1 | 2, price: number): number {
return quantity * price;
}

let total = calculatePrice(2, 19.99);
console.log(`Price: ${total}`);

quantity can only be 1 or 2

Mixing Value Types in a Literal Value Type
----------------------
A literal value type can be made up of any combination of values that can be expressed literally
including enums.

function getRandomValue(): 1 | 2 | 3 | 4 {

    return Math.floor(Math.random() * 4) + 1 as 1 | 2 | 3 | 4;

}

enum City { London = "LON", Paris = "PAR", Chicago = "CHI" };

function getMixedValue(): 1 | "Hello" | true | City.London {

switch (getRandomValue()) {
    case 1:
        return 1;
    case 2:
        return "Hello";
    case 3:
        return true;
    case 4:
        return City.London;
}

}
console.log(`Value: ${getMixedValue()}`);

getRandomValue only outputs 1,2,3, or 4

gitMixedValue only outputs 1, "Hello", true, or City.London

Nice way to type the outputs explicitly to allow for different types.

Using Overrides with Literal Value Types
----------------------
the relationship between a function’s parameter and result types can be
expressed using type overrides, restricting the effect of using type unions.

Type overrides can also be applied
to literal value types, as shown in Listing 9-28, which are essentially unions 
for individual values.

function getMixedValue(input: 1): 1;
function getMixedValue(input: 2 | 3): "Hello" | true;
function getMixedValue(input: 4): City.London;
function getMixedValue(input: number): 1 | "Hello" | true | City.London {
switch (input) {
case 1:
return 1;
case 2:
return "Hello";
case 3:
return true;
case 4:
default:
return City.London;
}
}

let first = getMixedValue(1);
let second = getMixedValue(2);
let third = getMixedValue(4);
console.log(`${ first}, ${second}, ${third}`);

Using Type Aliases
----------------------

TypeScript provides the type alias feature, which allows a custom type combination to
be assigned a name and applied where it is needed

type comboType = [string, number | true, 1 | 2 | 3 | City.London][];

function getValue(input: comboType): comboType {
    return [["Apples", 100, 2], ["Oranges", true, 3]];
}

let result: comboType = getValue([["Bananas", true, 1]]);

console.log(`Result: ${result}`);

>Result: Apples,100,2,Oranges,true,3

The listing uses a combination of types that would be difficult and tedious to repeat consistently every
time it is required:

type comboType = [string, number...]

type: keyword
comboType: Alias Name
[string, number...]: Type

The name assigned to the alias is used in place of the full type description.




